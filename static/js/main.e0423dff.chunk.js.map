{"version":3,"sources":["AppContext.js","constants/questionsArray.js","components/Question.jsx","components/Resume.jsx","components/Questions.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","questionsArray","question","resumeField","resumeFieldId","useStyles","makeStyles","theme","buttonContainer","display","marginTop","button","background","Question","classes","value","useContext","questionAnswer","state","function","handleChangeInput","nextQuestion","noValidate","autoComplete","onSubmit","TextField","id","label","name","answer","onChange","className","Button","type","variant","color","endIcon","ArrowRight","buttonBuildNew","cursor","minWidth","textAlign","border","padding","boxShadow","buttonDownload","resume","marginBottom","margin","refreshPage","window","location","reload","Resume","ref","createRef","answers","map","style","justifyContent","onClick","targetRef","filename","toPdf","root","alignItems","minHeight","progressBar","height","LinearProgressWithLabel","props","Box","width","mr","LinearProgress","Typography","Math","round","Questions","useState","progress","setProgress","questions","useEffect","length","App","setQuestions","setAnswers","setQuestionAnswer","Provider","e","target","preventDefault","qa","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0423dff.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AppContext = React.createContext();\n\nexport default AppContext;\n","let questionsArray = [\n  {\n    question: \"What is your name?\",\n    resumeField: \"Name\",\n    resumeFieldId: \"name\",\n  },\n  {\n    question: \"Email address\",\n    resumeField: \"Email\",\n    resumeFieldId: \"email\",\n  },\n  {\n    question: \"Phone number\",\n    resumeField: \"Phone Number\",\n    resumeFieldId: \"phoneNumber\",\n  },\n  {\n    question: \"Enter your address\",\n    resumeField: \"Adress\",\n    resumeFieldId: \"address\",\n  },\n  {\n    question: \"What is your career objective\",\n    resumeField: \"Career Objective\",\n    resumeFieldId: \"objective\",\n  },\n  {\n    question: \"What are your skills and abilities\",\n    resumeField: \"Skills\",\n    resumeFieldId: \"skills\",\n  },\n  {\n    question: \"Work experience\",\n    resumeField: \"Work Experience\",\n    resumeFieldId: \"experience\",\n  },\n  {\n    question: \"Education\",\n    resumeField: \"Educational Qualifications\",\n    resumeFieldId: \"education\",\n  },\n];\nexport default questionsArray;\n","import React, { useContext } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppContext from \"../AppContext\";\nimport { ArrowRight } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  buttonContainer: {\n    display: \"block\",\n    marginTop: \"1rem\",\n  },\n  button: {\n    background: \"white\",\n  },\n}));\n\nfunction Question() {\n  const classes = useStyles();\n  const value = useContext(AppContext);\n\n  let { questionAnswer } = value.state;\n  let { handleChangeInput, nextQuestion } = value.function;\n  return (\n    <div>\n      <form noValidate autoComplete=\"on\" onSubmit={nextQuestion}>\n        <TextField\n          id=\"standard-basic\"\n          label={questionAnswer.question}\n          name={questionAnswer.resumeFieldId}\n          value={questionAnswer.answer ? questionAnswer.answer : \"\"}\n          onChange={handleChangeInput}\n        />\n        <div className={classes.buttonContainer}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"default\"\n            className={classes.button}\n            endIcon={<ArrowRight />}\n          >\n            Next\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\nexport default Question;\n","import React, { createRef, useContext } from \"react\";\nimport Pdf from \"react-to-pdf\";\nimport AppContext from \"../AppContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  buttonBuildNew: {\n    cursor: \"pointer\",\n    minWidth: \"7rem\",\n    textAlign: \"center\",\n    border: \"none\",\n    padding: \"1rem\",\n    boxShadow: \"0 1px 1px 0 rgb(0 0 0 / 20%), 0 1px 2px 0 rgb(0 0 0 / 19%)\",\n    \"&:hover\": {\n      background: \"#d6d6d6\",\n    },\n  },\n  buttonDownload: {\n    cursor: \"pointer\",\n    minWidth: \"7rem\",\n    textAlign: \"center\",\n    border: \"none\",\n    padding: \"1rem\",\n    boxShadow: \"0 1px 1px 0 rgb(0 0 0 / 20%), 0 1px 2px 0 rgb(0 0 0 / 19%)\",\n    background: \"#77bb77\",\n    \"&:hover\": {\n      background: \"#548854\",\n    },\n  },\n  resume: {\n    padding: \"3rem\",\n    boxShadow: \"0 0.5rem 1rem 0 rgb(0 0 0 / 10%)\",\n    marginBottom: \"1rem\",\n    margin: \"1rem\",\n    marginTop: \"3rem\",\n  },\n}));\n\nlet refreshPage = () => {\n  window.location.reload();\n};\n\nfunction Resume() {\n  const ref = createRef();\n  const value = useContext(AppContext);\n  const classes = useStyles();\n\n  let { answers } = value.state;\n  return (\n    <div>\n      <div ref={ref} className={classes.resume}>\n        {answers.map((answer) => {\n          return (\n            <div>\n              {answer.resumeFieldId === \"name\" ||\n              answer.resumeFieldId === \"email\" ||\n              answer.resumeFieldId === \"address\" ||\n              answer.resumeFieldId === \"phoneNumber\" ? (\n                <div\n                  style={{\n                    textAlign: \"right\",\n                  }}\n                >\n                  <label>{answer.answer}</label>\n                </div>\n              ) : (\n                <div>\n                  <h4>{answer.resumeField}</h4>\n                  <p>{answer.answer}</p>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n        }}\n      >\n        <button className={classes.buttonBuildNew} onClick={refreshPage}>\n          Build New\n        </button>\n        <Pdf targetRef={ref} filename=\"code-example.pdf\">\n          {({ toPdf }) => (\n            <button onClick={toPdf} className={classes.buttonDownload}>\n              Download Resume\n            </button>\n          )}\n        </Pdf>\n      </div>\n    </div>\n  );\n}\n\nexport default Resume;\n","import React, { useEffect, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { LinearProgress, Typography, Box } from \"@material-ui/core\";\nimport Question from \"./Question\";\nimport AppContext from \"../AppContext\";\nimport Resume from \"./Resume\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minHeight: \"80vh\",\n  },\n  progressBar: {\n    margin: \"1rem\",\n  },\n  question: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"80vh\",\n  },\n  question: {},\n}));\n\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nfunction Questions() {\n  const classes = useStyles();\n\n  const [progress, setProgress] = React.useState(0);\n\n  const value = useContext(AppContext);\n  let { questionAnswer, questions, answers } = value.state;\n\n  useEffect(() => {\n    setProgress(\n      (answers.length / questions.length) * 100\n        ? (answers.length / questions.length) * 100\n        : 0\n    );\n  }, [answers]);\n\n  return (\n    <div>\n      {questions.length !== answers.length ? (\n        <LinearProgressWithLabel\n          value={progress}\n          className={classes.progressBar}\n        />\n      ) : null}\n      <div className={classes.root}>\n        {questions.length === answers.length ? (\n          <Resume />\n        ) : (\n          <div className={classes.question}>\n            <Question question={questionAnswer.question} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\nexport default Questions;\n","import React, { useEffect, useState } from \"react\";\nimport AppContext from \"./AppContext\";\nimport questionsArray from \"./constants/questionsArray\";\nimport Questions from \"./components/Questions\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction App() {\n  let [questions, setQuestions] = useState([]);\n  let [answers, setAnswers] = useState([]);\n  let [questionAnswer, setQuestionAnswer] = useState({});\n\n  useEffect(() => {\n    setQuestions(questionsArray);\n    setQuestionAnswer(questionsArray[0]);\n  }, []);\n\n  let handleChangeInput = (e) => {\n    setQuestionAnswer({\n      ...questionAnswer,\n      answer: e.target.value,\n    });\n  };\n\n  let nextQuestion = (e) => {\n    e.preventDefault();\n    questions.map((question) => {\n      if (question.resumeFieldId == questionAnswer.resumeFieldId) {\n        setAnswers([\n          ...answers,\n          { ...question, answer: questionAnswer.answer },\n        ]);\n      }\n    });\n\n    questions.map((qa, index) => {\n      if (index <= questions.length) {\n        if (qa.resumeFieldId === questionAnswer.resumeFieldId) {\n          setQuestionAnswer(questions[index + 1]);\n        }\n      }\n    });\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        state: {\n          questionAnswer,\n          questions,\n          answers,\n        },\n        function: {\n          handleChangeInput: handleChangeInput,\n          nextQuestion: nextQuestion,\n        },\n      }}\n    >\n      <div className=\"App\">\n        <Typography\n          variant=\"h6\"\n          style={{\n            textAlign: \"center\",\n            margin: \"2rem\",\n          }}\n        >\n          Resume Builder\n        </Typography>\n        <Questions />\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}